[{"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\index.js":"1","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\App.js":"2","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Board\\Board.js":"3","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Card\\Card.js":"4","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Dropdown\\Dropdown.js":"5","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Card\\CardInfo\\CardInfo.js":"6","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Modal\\Modal.js":"7","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Editabled\\Editable.js":"8","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\googleSheet.js":"9"},{"size":219,"mtime":1697085250000,"results":"10","hashOfConfig":"11"},{"size":11645,"mtime":1747063833555,"results":"12","hashOfConfig":"11"},{"size":6322,"mtime":1747062385498,"results":"13","hashOfConfig":"11"},{"size":4183,"mtime":1747069702969,"results":"14","hashOfConfig":"11"},{"size":670,"mtime":1697085250000,"results":"15","hashOfConfig":"11"},{"size":11504,"mtime":1747060440705,"results":"16","hashOfConfig":"11"},{"size":1265,"mtime":1746844140853,"results":"17","hashOfConfig":"11"},{"size":2888,"mtime":1747006495889,"results":"18","hashOfConfig":"11"},{"size":1604,"mtime":1747058167466,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5mm1q8",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\index.js",[],[],"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\App.js",["51"],[],"// 1) Все импорты подряд, без пропусков и кода между ними\nimport React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport {\n  addTaskToSheet,\n  updateTaskInSheet,\n  deleteTaskFromSheet\n} from \"./googleSheet\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { Sun, Moon } from \"lucide-react\";\nimport Board from \"./Components/Board/Board\";\nimport \"./App.css\";\n\naxios.defaults.baseURL = \"http://localhost:3001\";\n\nexport default function App() {\n  const [boards, setBoards] = useState([]);\n  const [darkTheme, setDarkTheme] = useState(\n    localStorage.getItem(\"kanban-theme\") === \"dark\"\n  );\n\n  // фильтр/сорт/поиск\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [sortValue, setSortValue] = useState(\"none\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showSortMenu, setShowSortMenu] = useState(false);\n  const [showFilterMenu, setShowFilterMenu] = useState(false);\n\n  const statuses = [\"Очередь\", \"В работе\", \"На проверке\", \"Готово\"];\n   const sortLabels = {\n    none:      \"Все\",                   // вместо «None»\n    titleAsc:  \"Название А→Я\",\n    titleDesc: \"Название Я→А\",\n    dateAsc:   \"По дате ↑\",\n    dateDesc:  \"По дате ↓\",\n  };\n\nconst menuRef = useRef(null);;\n\n  // при клике вне sortRef и filterRef прячем оба меню\n  useEffect(() => {\n  const handleClickOutside = (e) => {\n    // если menuRef задан и клик был не внутри него\n    if (menuRef.current && !menuRef.current.contains(e.target)) {\n      setShowSortMenu(false);\n      setShowFilterMenu(false);\n    }\n  };\n  document.addEventListener(\"mousedown\", handleClickOutside);\n  return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n}, []);\n\n\n  // 1) Начальная загрузка: localStorage или API\n  useEffect(() => {\n    const saved = localStorage.getItem(\"kanban-boards\");\n    if (saved) {\n      setBoards(JSON.parse(saved));\n    } else {\n      axios\n        .get(\"/api/board\")\n        .then((res) => {\n          const tasks = res.data.tasks || [];\n          const grouped = statuses.map((st, i) => ({\n            id: `${i + 1}`,\n            title: st,\n            cards: tasks.filter((t) => t.status === st),\n          }));\n          setBoards(grouped);\n        })\n        .catch((err) => console.error(\"Ошибка загрузки:\", err));\n    }\n  }, []);\n\n  // 2) Сохраняем тему\n  useEffect(() => {\n    localStorage.setItem(\"kanban-theme\", darkTheme ? \"dark\" : \"light\");\n  }, [darkTheme]);\n\n  // 3) Сохраняем доски в localStorage при любых изменениях\n  useEffect(() => {\n    localStorage.setItem(\"kanban-boards\", JSON.stringify(boards));\n  }, [boards]);\n\n  // фильтрация / поиск / сортировка\n  const applyFilterSearchSort = (cards) => {\n    let result = [...cards];\n    if (filterStatus !== \"all\") {\n      result = result.filter((c) => c.status === filterStatus);\n    }\n    if (searchQuery.trim()) {\n      const q = searchQuery.toLowerCase();\n      result = result.filter((c) =>\n        c.title.toLowerCase().includes(q)\n      );\n    }\n    if (sortValue === \"titleAsc\") {\n      result.sort((a, b) => (a.title > b.title ? 1 : -1));\n    } else if (sortValue === \"titleDesc\") {\n      result.sort((a, b) => (a.title < b.title ? 1 : -1));\n    } else if (sortValue === \"dateAsc\") {\n      result.sort((a, b) => {\n        if (!a.date) return 1;\n        if (!b.date) return -1;\n        return new Date(a.date) - new Date(b.date);\n      });\n    } else if (sortValue === \"dateDesc\") {\n      result.sort((a, b) => {\n        if (!a.date) return 1;\n        if (!b.date) return -1;\n        return new Date(b.date) - new Date(a.date);\n      });\n    }\n    return result;\n  };\n\n  const displayedBoards = boards.map((b) => ({\n    ...b,\n    cards: applyFilterSearchSort(b.cards),\n  }));\n\n  // меню сортировки / фильтра\n  const handleSortClick = () => {\n    setShowSortMenu((v) => !v);\n    setShowFilterMenu(false);\n  };\n  const handleFilterClick = () => {\n    setShowFilterMenu((v) => !v);\n    setShowSortMenu(false);\n  };\n  const setSort = (val) => {\n    setSortValue(val);\n    setShowSortMenu(false);\n  };\n  const setFilter = (val) => {\n    setFilterStatus(val);\n    setShowFilterMenu(false);\n  };\n\n  // CRUD карточек\n  // … внутри функции App **не** через “кортеж” (`,`), а просто как блок:\n\nconst addCardHandler = (boardId, cardData) => {\n  // 1) обновляем локально\n  setBoards(bs =>\n    bs.map(b =>\n      b.id === boardId\n        ? { ...b, cards: [...b.cards, { ...cardData, status: b.title }] }\n        : b\n    )\n  );\n\n  // 2) сохраняем на наш сервер\n  axios.post(\"/api/addTask\", { card: cardData }).catch(console.error);\n\n  // 3) и пушим в Google Sheets\n  addTaskToSheet({\n    id:          cardData.id,\n    title:       cardData.title,\n    description: cardData.description,\n    status:      cardData.status,\n    startDate:   cardData.startDate,\n    dueDate:     cardData.dueDate,\n    priority:    cardData.priority,\n    labels:      cardData.labels\n  }).catch(console.error);\n};\n\nconst updateCard = (boardId, cardId, updatedCard) => {\n  setBoards(bs =>\n    bs.map(b =>\n      b.id === boardId\n        ? {\n            ...b,\n            cards: b.cards.map(c =>\n              c.id === cardId ? updatedCard : c\n            )\n          }\n        : b\n    )\n  );\n  axios.post(\"/api/editTask\", { card: updatedCard }).catch(console.error);\n  updateTaskInSheet({\n    id:          updatedCard.id,\n    title:       updatedCard.title,\n    description: updatedCard.description,\n    status:      updatedCard.status,\n    startDate:   updatedCard.startDate,\n    dueDate:     updatedCard.dueDate,\n    priority:    updatedCard.priority,\n    labels:      updatedCard.labels\n  }).catch(console.error);\n};\n\nconst removeCard = (boardId, cardId) => {\n  setBoards(bs =>\n    bs.map(b =>\n      b.id === boardId\n        ? { ...b, cards: b.cards.filter(c => c.id !== cardId) }\n        : b\n    )\n  );\n  axios.post(\"/api/deleteTask\", { id: cardId }).catch(console.error);\n  deleteTaskFromSheet(cardId).catch(console.error);\n};\n\n\n  // Drag & Drop\n  const onDragEnd = (result) => {\n  const { source, destination, draggableId } = result;\n  if (!destination) return;\n\n  const srcId = source.droppableId;\n  const dstId = destination.droppableId;\n\n  // 1) Перемещение внутри того же столбца — просто ре-порядок\n  if (srcId === dstId) {\n    setBoards((prev) =>\n      prev.map((b) => {\n        if (b.id !== srcId) return b;\n        const cards = Array.from(b.cards);\n        const [movedCard] = cards.splice(source.index, 1);\n        cards.splice(destination.index, 0, movedCard);\n        return { ...b, cards };\n      })\n    );\n    return;\n  }\n\n  // 2) Перемещение в другой столбец — меняем статус и синхронизируем\n  // Извлечём movedCard заранее из текущего стейта\n  const srcBoard = boards.find((b) => b.id === srcId);\n  const dstBoard = boards.find((b) => b.id === dstId);\n  const srcCards = Array.from(srcBoard.cards);\n  // Удаляем карточку из src\n  const [movedCard] = srcCards.splice(source.index, 1);\n  // Обновляем статус\n  movedCard.status = dstBoard.title;\n  // Вставляем в dst\n  const dstCards = Array.from(dstBoard.cards);\n  dstCards.splice(destination.index, 0, movedCard);\n\n  // 3) Обновляем локальный стейт\n  setBoards((prev) =>\n    prev.map((b) => {\n      if (b.id === srcId) return { ...b, cards: srcCards };\n      if (b.id === dstId) return { ...b, cards: dstCards };\n      return b;\n    })\n  );\n\n  // 4) Сохраняем в своё API (Express)\n  axios\n    .post(\"/api/updateTask\", {\n      id: draggableId,\n      status: movedCard.status, // уже текстовый заголовок колонны\n    })\n    .catch(console.error);\n\n  // 5) Пушим обновлённую карточку в Google Sheets\n  updateTaskInSheet({\n    id:          movedCard.id,\n    title:       movedCard.title,\n    description: movedCard.description,\n    status:      movedCard.status,\n    startDate:   movedCard.startDate,\n    dueDate:     movedCard.dueDate,\n    priority:    movedCard.priority,\n    labels:      movedCard.labels,\n  }).catch(console.error);\n};\n\n\n  return (\n    <div className={`app ${darkTheme ? \"dark\" : \"\"}`}>\n      <div className=\"app_nav\">\n        <h1>Kanban Board</h1>\n        <div\n          className=\"theme-toggle\"\n          onClick={() => setDarkTheme((d) => !d)}\n        >\n          {darkTheme ? <Sun size={20} /> : <Moon size={20} />}\n        </div>\n      </div>\n\n      <div className=\"board-menu\" ref={menuRef}>\n        <div className=\"menu-left\">\n         <div className=\"menu-item\" onClick={handleSortClick}>\n  Сортировка {sortValue !== \"none\" && `(${sortLabels[sortValue]})`}\n  {showSortMenu && (\n    <div className=\"dropdown-menu\">\n      {[\n        { key: \"none\",      label: \"Нет\"      },\n        { key: \"titleAsc\",  label: \"Название А→Я\" },\n        { key: \"titleDesc\", label: \"Название Я→А\" },\n        { key: \"dateAsc\",   label: \"По дате ↑\"   },\n        { key: \"dateDesc\",  label: \"По дате ↓\"   },\n      ].map(({ key, label }) => (\n        <div\n          key={key}\n          className=\"dropdown-item\"\n          onClick={() => setSort(key)}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )}\n</div>\n\n{/* --- Меню фильтра --- */}\n<div className=\"menu-item\" onClick={handleFilterClick}>\n  Фильтр {filterStatus !== \"all\" && `(${filterStatus === \"all\" ? \"Все\" : filterStatus})`}\n  {showFilterMenu && (\n    <div className=\"dropdown-menu\">\n      {[\n        { key: \"all\",    label: \"Все\"      },\n        ...statuses.map(s => ({ key: s, label: s }))\n      ].map(({ key, label }) => (\n        <div\n          key={key}\n          className=\"dropdown-item\"\n          onClick={() => setFilter(key)}\n        >\n          {label}\n        </div>\n      ))}\n    </div>\n  )}\n</div>\n          \n        </div>\n        <div className=\"menu-right\">\n          <div className=\"search-container\">\n            <svg\n              className=\"search-icon\"\n              width=\"16\"\n              height=\"16\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              viewBox=\"0 0 24 24\"\n              aria-hidden=\"true\"\n            >\n              <circle cx=\"11\" cy=\"11\" r=\"8\" />\n              <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\" />\n            </svg>\n            <input\n              type=\"text\"\n              placeholder=\"Поиск...\"\n              className=\"search-no-border\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"app_boards_container\">\n          <div className=\"app_boards\">\n            {displayedBoards.map((board) => (\n              <Board\n                key={board.id}\n                board={board}\n                addCard={addCardHandler}\n                updateCard={updateCard}\n                removeCard={removeCard}\n                darkTheme={darkTheme}\n              />\n            ))}\n          </div>\n        </div>\n      </DragDropContext>\n    </div>\n  );\n}\n","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Board\\Board.js",[],[],"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Card\\Card.js",[],[],"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Dropdown\\Dropdown.js",[],[],"C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Card\\CardInfo\\CardInfo.js",["52","53","54","55","56"],[],"// src/Components/CardInfo/CardInfo.js\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport { X } from \"react-feather\";\nimport { Plus, Trash, Clock } from \"lucide-react\";\n\nimport Modal from \"../../Modal/Modal\";\nimport Editable from \"../../Editabled/Editable\";\nimport \"./CardInfo.css\";\n\n\n\nfunction CardInfo(props) {\n  const addTaskRef = useRef(null);\n  const {\n    id,\n    title,\n    description,\n    date,        // исходное поле с датой завершения\n    labels,\n    tasks,\n    status,\n    startDate: initStart,\n  } = props.card;\n\n  const [localValues, setLocalValues] = useState({\n    title: title || \"\",\n    description: description || \"\",\n    status: status || \"На проверке\",\n    startDate: initStart || new Date().toISOString().split(\"T\")[0],\n    dueDate: date || \"\",\n    priority: \"Неизвестно\",\n    labels: labels || [],\n    tasks: tasks || [],\n  });\n\n  // сохранить изменения с дебаунсом\n  useEffect(() => {\n    const debounced = debounce(() => {\n      props.updateCard(\n        props.boardId,\n        id,\n        { ...props.card, ...localValues, date: localValues.dueDate }\n      );\n    }, 500);\n    debounced();\n    return () => {\n      debounced.flush();\n      debounced.cancel();\n    };\n  }, [localValues]);\n\n  // пересчет приоритета\n  const computePriority = (start, due) => {\n    if (!due) return \"Неизвестно\";\n    const sd = new Date(start), dd = new Date(due);\n    const diff = (dd - sd) / (1000 * 60 * 60 * 24);\n    if (diff <= 3) return \"Срочный\";\n    if (diff <= 7) return \"Высокий\";\n    if (diff <= 14) return \"Средний\";\n    return \"Низкий\";\n  };\n  useEffect(() => {\n    const p = computePriority(localValues.startDate, localValues.dueDate);\n    if (p !== localValues.priority) {\n      setLocalValues(v => ({ ...v, priority: p }));\n    }\n  }, [localValues.startDate, localValues.dueDate]);\n\n  // обновление дат\n  const updateStartDate = v => setLocalValues(p => ({ ...p, startDate: v }));\n  const updateDueDate   = v => setLocalValues(p => ({ ...p, dueDate: v }));\n\n  // стили статуса/приоритета\n  const getStatusStyles = val => {\n    switch (val) {\n      case \"Очередь\":     return { backgroundColor: \"var(--yellow-300)\", color: \"var(--yellow-700)\" };\n      case \"В работе\":    return { backgroundColor: \"var(--blue-300)\",   color: \"var(--blue-700)\" };\n      case \"На проверке\":\n      case \"Срочный\":     return { backgroundColor: \"var(--red-300)\",    color: \"var(--red-700)\" };\n      case \"Высокий\":     return { backgroundColor: \"var(--yellow-300)\", color: \"var(--yellow-700)\" };\n      case \"Средний\":     return { backgroundColor: \"var(--blue-300)\",   color: \"var(--blue-700)\" };\n      case \"Низкий\":      return { backgroundColor: \"var(--green-300)\",  color: \"var(--green-700)\" };\n      case \"Готово\":      return { backgroundColor: \"var(--green-300)\",  color: \"var(--green-700)\" };\n      default:            return { backgroundColor: \"var(--secondary-background)\", color: \"var(--text-muted)\" };\n    }\n  };\n\n  // теги\n  const [newLabelText, setNewLabelText]   = useState(\"\");\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [labelError, setLabelError]       = useState(\"\");\n\n  const addLabel = () => {\n    if (!newLabelText.trim()) return;\n    if (!selectedColor) {\n      setLabelError(\"Выберите цвет тега\");\n      return;\n    }\n    const lab = { text: newLabelText.trim(), color: selectedColor };\n    setLocalValues(v => ({ ...v, labels: [...v.labels, lab] }));\n    setNewLabelText(\"\");\n    setSelectedColor(\"\");\n    setLabelError(\"\");\n  };\n\n  const removeLabel = idx => {\n    const updated = [...localValues.labels];\n    updated.splice(idx, 1);\n    setLocalValues(v => ({ ...v, labels: updated }));\n  };\n\n  // чеклист\n  const [taskKey, setTaskKey] = useState(0);\n\n const addTask = text => {\n  if (!text.trim()) return;\n  setLocalValues(v => ({\n    ...v,\n    tasks: [...v.tasks, { id: Date.now(), text, completed: false }]\n  }));\n  // сброс и фокус\n  addTaskRef.current.clear();\n  addTaskRef.current.focus();\n};\n\n  const toggleTask = id => {\n    const updated = localValues.tasks.map(t =>\n      t.id === id ? { ...t, completed: !t.completed } : t\n    );\n    setLocalValues(v => ({ ...v, tasks: updated }));\n  };\n\n const removeTask = id => {\n    // 1) пометить таску «на удаление»\n    setLocalValues(v => ({\n      ...v,\n      tasks: v.tasks.map(t =>\n        t.id === id ? { ...t, isRemoving: true } : t\n      )\n    }));\n    // 2) через 300ms окончательно убрать\n    setTimeout(() => {\n      setLocalValues(v => ({\n        ...v,\n        tasks: v.tasks.filter(t => t.id !== id)\n      }));\n    }, 300);\n  };\n\n  const tasksCount     = localValues.tasks.length;\n  const tasksCompleted = localValues.tasks.filter(t => t.completed).length;\n  const progressPercent= tasksCount ? Math.round(tasksCompleted / tasksCount * 100) : 0;\n\n let progressColor = \"#e74c3c\"; // <33% — красный\nif (progressPercent >= 33 && progressPercent <= 50) {\n  progressColor = \"#f1c40f\";  // 33–50% — жёлтый\n} else if (progressPercent > 50 && progressPercent < 100) {\n  progressColor = \"#3498db\";  // 51–99% — синий\n} else if (progressPercent === 100) {\n  progressColor = \"#2ecc71\";  // 100% — зелёный\n}\n\n\n  return (\n    <Modal onClose={props.onClose}>\n      <div className=\"cardinfo_container\">\n        <div className=\"cardinfo_close-btn\" onClick={props.onClose}>\n          <X size={24} />\n        </div>\n\n        {/* Заголовок и описание */}\n        <h2 className=\"cardinfo_title--static\">{localValues.title}</h2>\n        <p className=\"cardinfo_description--static\">{localValues.description}</p>\n\n        {/* Основные поля */}\n        <div className=\"cardinfo_table-fields\">\n          {/* Статус */}\n          <div className=\"row\">\n            <div className=\"row_label\">Статус</div>\n            <div\n              className=\"row_value cardinfo_static-value\"\n              style={getStatusStyles(localValues.status)}\n            >\n              {localValues.status}\n            </div>\n          </div>\n\n          {/* Дата начала */}\n          <div className=\"row row-date\">\n  <div className=\"row_label\">Дата начала</div>\n  <div className=\"row_value date-picker\">\n    <input\n      type=\"date\"\n      value={localValues.startDate}\n      onChange={e => updateStartDate(e.target.value)}\n      min=\"1900-01-01\"\n      max=\"9999-12-31\"\n    />\n  </div>\n</div>\n\n          {/* Дата завершения */}\n          <div className=\"row row-date\">\n  <div className=\"row_label\">Дата завершения</div>\n  <div className=\"row_value date-picker\">\n    <input\n      type=\"date\"\n      value={localValues.dueDate}\n      onChange={e => updateDueDate(e.target.value)}\n      min=\"1900-01-01\"\n      max=\"9999-12-31\"\n    />\n  </div>\n</div>\n\n          {/* Приоритет */}\n          <div className=\"row\">\n            <div className=\"row_label\">Приоритет</div>\n            <div\n              className=\"row_value cardinfo_static-value\"\n              style={getStatusStyles(localValues.priority)}\n            >\n              {localValues.priority === \"Срочный\" && <Clock size={14} />}\n              {localValues.priority}\n            </div>\n          </div>\n\n          {/* Теги */}\n          <div className=\"row row-tags\">\n            <div className=\"row_label\">Теги</div>\n            <div className=\"row_value cardinfo_tags\">\n              <div className=\"cardinfo_label-input\">\n                <input\n                  className=\"editable_input\"\n                  type=\"text\"\n                  placeholder=\"Введите тег\"\n                  value={newLabelText}\n                  onChange={e => {\n                    setNewLabelText(e.target.value);\n                    setLabelError(\"\");\n                  }}\n                />\n                <div className=\"cardinfo_label-colors\">\n                  {[\"yellow\", \"blue\", \"green\", \"red\"].map(color => (\n                    <div\n                      key={color}\n                      className={`cardinfo_color-circle${selectedColor === color ? \" selected\" : \"\"}`}\n                      style={{ backgroundColor: `var(--${color}-300)` }}\n                      onClick={() => {\n                        setSelectedColor(color);\n                        setLabelError(\"\");\n                      }}\n                    />\n                  ))}\n                </div>\n                 <button className=\"btn-add\" onClick={addLabel}>\n   Добавить \n   </button>\n              </div>\n              {labelError && <div className=\"label-error\">{labelError}</div>}\n              <div className=\"cardinfo_labels-list\">\n                {localValues.labels.map((lab, i) => (\n                  <div\n                    key={i}\n                    className=\"cardinfo_label-pill\"\n                    style={{\n                      color: `var(--${lab.color}-700)`,\n                      backgroundColor: `var(--${lab.color}-300)`,\n                    }}\n                  >\n                    <span>{lab.text}</span>\n                    <Trash\n                      className=\"cardinfo_label-remove\"\n                      size={14}\n                      onClick={() => removeLabel(i)}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Вкладки */}\n        <div className=\"cardinfo_tabs\">\n          <span className=\"cardinfo_tab-active\">Чеклист</span>\n          <span className=\"cardinfo_tab\">Файлы</span>\n          <span className=\"cardinfo_tab\">Комментарии</span>\n          <span className=\"cardinfo_tab\">Активность</span>\n        </div>\n\n        {/* Чеклист */}\n        <div className=\"cardinfo_checklist-header\">\n          <h3>Чеклист ({tasksCompleted}/{tasksCount})</h3>\n        </div>\n        <div className=\"cardinfo_progress-bar\">\n          <div\n            className=\"cardinfo_progress-fill\"\n            style={{ width: `${progressPercent}%`, backgroundColor: progressColor }}\n          />\n        </div>\n        <div className=\"cardinfo_tasks\">\n          {localValues.tasks.map(task => (\n            <div\n  key={task.id}\n  className={`cardinfo_task-item${task.isRemoving ? \" removing\" : \"\"}`}\n>\n              <label className=\"custom-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={task.completed}\n                  onChange={() => toggleTask(task.id)}\n                />\n                <span className=\"checkmark\" />\n              </label>\n                <span className={`task-text${task.completed ? ' completed' : ''}`}>\n      {task.text}\n     </span>\n              <Trash\n                className=\"cardinfo_task-remove\"\n                size={14}\n                onClick={() => removeTask(task.id)}\n              />\n            </div>\n          ))}\n        </div>\n\n        {/* Добавить задачу */}\n         <Editable\n        ref={addTaskRef}\n        defaultValue=\"\"\n        placeholder=\"Добавить задачу\"\n        onSubmit={addTask}\n        autoFocus\n      />\n      </div>\n    </Modal>\n  );\n}\n\nexport default CardInfo;\n","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Modal\\Modal.js",["57"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Modal.css\";\n\nfunction Modal({ children, onClose }) {\n  const [visible, setVisible] = useState(false);\n\n  // при маунте включаем анимацию появления\n  useEffect(() => {\n    requestAnimationFrame(() => setVisible(true));\n  }, []);\n\n  // по Escape — запускаем закрытие\n  useEffect(() => {\n    const onKey = (e) => {\n      if (e.key === \"Escape\") startClose();\n    };\n    document.addEventListener(\"keydown\", onKey);\n    return () => document.removeEventListener(\"keydown\", onKey);\n  }, []);\n\n  const startClose = () => {\n    setVisible(false);\n    // ждём окончания анимации (минимальное время — 200ms)\n    setTimeout(() => {\n      onClose && onClose();\n    }, 200);\n  };\n\n  const handleOverlayClick = () => {\n    startClose();\n  };\n\n  const handleContentClick = (e) => {\n    e.stopPropagation();\n  };\n\n  return (\n    <div\n      className={`modal ${visible ? \"show\" : \"hide\"}`}\n      onClick={handleOverlayClick}\n    >\n      <div\n        className={`modal_content ${visible ? \"show\" : \"hide\"}`}\n        onClick={handleContentClick}\n      >\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\Components\\Editabled\\Editable.js",["58"],[],"// src/Components/Editabled/Editable.js\nimport React, {\n  useState,\n  useRef,\n  useEffect,\n  forwardRef,\n  useImperativeHandle\n} from \"react\";\nimport { SquarePen } from \"lucide-react\";\nimport \"./Editable.css\";\n\nconst Editable = forwardRef(({\n  text = \"\",\n  defaultValue = \"\",\n  placeholder = \"\",\n  onSubmit,\n  shortLine = false,\n}, ref) => {\n  const [value, setValue] = useState(defaultValue || text || \"\");\n  const [isEditing, setIsEditing] = useState(false);\n  const containerRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // клики вне — завершаем редактирование\n  useEffect(() => {\n    function handleClickOutside(e) {\n      if (\n        isEditing &&\n        containerRef.current &&\n        !containerRef.current.contains(e.target)\n      ) {\n        finishEdit();\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [isEditing]);\n\n  // при входе в режим редактирования — фокус и курсор в конец\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      const len = inputRef.current.value.length;\n      inputRef.current.setSelectionRange(len, len);\n    }\n  }, [isEditing]);\n\n  // делегируем методы наружу\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      setIsEditing(true);\n      // фокус после переключения\n      setTimeout(() => inputRef.current?.focus(), 0);\n    },\n    clear: () => {\n      setValue(\"\");\n      if (inputRef.current) inputRef.current.value = \"\";\n    },\n    get value() {\n      return value;\n    },\n    set value(v) {\n      setValue(v);\n      if (inputRef.current) inputRef.current.value = v;\n    }\n  }), [value]);\n\n  const startEdit = e => {\n    e.stopPropagation();\n    setIsEditing(true);\n  };\n\n  const finishEdit = () => {\n    setIsEditing(false);\n    onSubmit && onSubmit(value.trim());\n  };\n\n  const handleKeyDown = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      finishEdit();\n    }\n  };\n\n  return (\n    <div\n      className={`editable_line ${shortLine ? \"short\" : \"\"}`}\n      ref={containerRef}\n      onClick={!isEditing ? startEdit : e => e.stopPropagation()}\n    >\n      <SquarePen className=\"editable_icon\" />\n\n      {!isEditing ? (\n        <span className={`editable_text ${!value ? \"placeholder\" : \"\"}`}>\n          {value || placeholder}\n        </span>\n      ) : (\n        <input\n          ref={inputRef}\n          type=\"text\"\n          className={`editable_input ${shortLine ? \"short\" : \"\"}`}\n          value={value}\n          onChange={e => setValue(e.target.value)}\n          onBlur={finishEdit}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n        />\n      )}\n    </div>\n  );\n});\n\nexport default Editable;\n","C:\\Users\\aleks\\Desktop\\kanbanapp\\kanban-front\\src\\googleSheet.js",[],[],{"ruleId":"59","severity":1,"message":"60","line":73,"column":6,"nodeType":"61","endLine":73,"endColumn":8,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":10,"nodeType":"65","messageId":"66","endLine":6,"endColumn":14},{"ruleId":"59","severity":1,"message":"67","line":52,"column":6,"nodeType":"61","endLine":52,"endColumn":19,"suggestions":"68"},{"ruleId":"59","severity":1,"message":"69","line":69,"column":6,"nodeType":"61","endLine":69,"endColumn":50,"suggestions":"70"},{"ruleId":"63","severity":1,"message":"71","line":115,"column":10,"nodeType":"65","messageId":"66","endLine":115,"endColumn":17},{"ruleId":"63","severity":1,"message":"72","line":115,"column":19,"nodeType":"65","messageId":"66","endLine":115,"endColumn":29},{"ruleId":"59","severity":1,"message":"73","line":19,"column":6,"nodeType":"61","endLine":19,"endColumn":8,"suggestions":"74"},{"ruleId":"59","severity":1,"message":"75","line":37,"column":6,"nodeType":"61","endLine":37,"endColumn":17,"suggestions":"76"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'statuses'. Either include it or remove the dependency array.","ArrayExpression",["77"],"no-unused-vars","'Plus' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["78"],"React Hook useEffect has a missing dependency: 'localValues.priority'. Either include it or remove the dependency array.",["79"],"'taskKey' is assigned a value but never used.","'setTaskKey' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'startClose'. Either include it or remove the dependency array.",["80"],"React Hook useEffect has a missing dependency: 'finishEdit'. Either include it or remove the dependency array.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [statuses]",{"range":"92","text":"93"},"Update the dependencies array to be: [id, localValues, props]",{"range":"94","text":"95"},"Update the dependencies array to be: [localValues.startDate, localValues.dueDate, localValues.priority]",{"range":"96","text":"97"},"Update the dependencies array to be: [startClose]",{"range":"98","text":"99"},"Update the dependencies array to be: [finishEdit, isEditing]",{"range":"100","text":"101"},[2302,2304],"[statuses]",[1255,1268],"[id, localValues, props]",[1814,1858],"[localValues.startDate, localValues.dueDate, localValues.priority]",[544,546],"[startClose]",[939,950],"[finishEdit, isEditing]"]